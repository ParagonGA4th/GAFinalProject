#pragma once
#include <string>
#include <vector>
#include <memory>

/// <summary>
/// 3D ?? ??????? ?ε???? ??????? ?????.
/// 3D ?? ??????? ????????, Skinned/Static ???θ? ?????? ?? ??? ?ε????.
/// ???? ????? ?ν?????? ?????? ??????? ???.
/// </summary>

struct ID3D11Buffer;

namespace Assimp
{
	class Importer;
}

namespace Pg::Graphics
{
	class Asset3DModelData;
	class RenderObjectInstancedMesh3D;
}

namespace Pg::Graphics::Loader
{
	class AssetBasic3DLoader
	{
	public:
		AssetBasic3DLoader();
		~AssetBasic3DLoader();

		//???? Skinned??? ????? ???. (?????????? Importer FreeScene ???? ????)
		bool IsModelSkinned(const std::string& path);

		//3DModel?? ?????? ?ε???? Data?? ??? ????? ?????, ?????? ????? ???????? ?????????.
		void Load3DModelBuffer(const std::string& path, Asset3DModelData* modelData);
		
		//RenderStatic/SkinnedMesh에서 호출되는 함수들.
		//VB/IB를 모델의 정보에 맞게 로드한다.
		//밑 함수들의 호출조건은 미리 Load3DModelBuffer가 호출되었다는 전제가 있다.
		//void LoadObjMatBufferStatic(ID3D11Buffer*& vb, Asset3DModelData* modelData, unsigned int objectID, unsigned int materialID);
		//void LoadObjMatBufferSkinned(ID3D11Buffer*& vb, Asset3DModelData* modelData, unsigned int objectID, unsigned int materialID);
	
		//Instanced Object가 추가되면서, 이를 위한 개별적인 LoadObjMatBufferInstanced가 있어야 한다.
		//일괄적으로 정해진 때에서 3DList를 받아오기.
		//Object / Material ID 당연히 개별로 가져와야 할 것이다.
		void LoadObjMatTRSBufferInstanced(ID3D11Buffer*& vb, const std::vector<RenderObjectInstancedMesh3D*>& instancedMeshList);
	private:
		std::unique_ptr<Assimp::Importer>_importer;
	};
}


